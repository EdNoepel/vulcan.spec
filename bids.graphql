# Cat.flip.call     -> create Bid id: e.id
# Flipper.tick.call -> update Bid id: e.id
# Flipper.tend.call -> update Bid id: e.id
# Flipper.dent.call -> update Bid id: e.id
# Flipper.deal.call -> update Bid id: e.id => dealt = true
#
# Flopper.kick.call -> create Bid id: e.id
# Flopper.dent.call -> update Bid id: e.id
# Flopper.deal.call -> update Bid id: e.id => dealt = true
#
# Flapper.kick.call -> create Bid id: e.id
# Flapper.tend.call -> update Bid id: e.id
# Flapper.deal.call -> update Bid id: e.id => dealt = true
type Bid {  id:      Integer    # param: e.n             desc: unique bid identifier
  biteId Integer    # param: e.id            desc: bite id        (flip only)
  urnId:   String     # store: bids[id].urn    desc: urn identifier (flip only)
  guy:     Address    # store: bids[id].guy    desc: highest bidder
  tic:     Era        # store: bids[id].tic    desc: bid expiry
  end:     Era        # store: bids[id].end    desc: auction expiry
  lot:     Float      # store: bids[id].lot    desc: lot amount
  bid:     Float      # store: bids[id].bid    desc: bid amount
  gal:     Address    # store: bids[id].gal    desc: receives auction proceeds
  tab:     Address    # store: bids[id].tab    desc: amount to raise - (tend/dent phase switch) (flip only)
  dealt:   Boolean    #                        desc: true if auction has been settled
  market:  Market     #                        desc: market detail
  type:    BidType    #                        desc: auction type - flip | flap | flop
  events:  [BidEvent] #                        desc: bid state change events
  created: Datetime
  updated: Datetime
}

type BidEvent {
  bidId: Integer # param: e.id             desc: bid identifier (fk)
  bid:   Bid     # query: Bid(id: bidId)   desc: ilk object
  lot:   Float   # param: e.lot
  bid:   Float   # param: e.bid
  act:   BidAct  #                         desc: bid action
  tx:    Tx      #                         desc: transaction meta
}

# Auction types
enum BidType {
  FLIP
  FLAP
  FLOP
}

# Bid actions
enum BidAct {
  KICK
  TEND
  DENT
  DEAL
}


# Registry
type Market {
  lad:         Address # Auction contract
  pair:        String  # pair identifier e.g MKRDAI
  base:        Address # base token address
  quote:       Address # quote token address
  baseSymbol:  String  # base symbol e.g MKR
  quoteSymbol: String  # quote symbol e.g DAI
}

type Query {

   allBids(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidOrderBy,
     condition: BidCondition,
     filter:    BidFilter
   ): [Bid]

   getBid(
     id:          Int!
     blockNumber: Int # optionally retrieve bid state at a given block height
   ): Bid

   allBidStates(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidOrderBy,
     condition: BidCondition,
     filter:    BidFilter
     interval:  String # optionally specify a postgres aggregation interval e.g '1 day'
   ): [Bid]

   allBidEvents(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidEventOrderBy,
     condition: BidEventCondition,
     filter:    BidEventFilter
   ): [BidEvent]

}
