type Bid {

  # Persisted bids mapping from flipper, flapper and flopper contracts
  # Initial state is set via `kick` actions.
  # Bid state is updated via `tend`  and `dent` actions.
  # Final bid state is set via `deal` actions.

  id:      Integer    # unique bid identifier
  guy:     Address    # highest bidder
  tic:     Era        # bid expiry
  end:     Era        # auction expiry
  lot:     Float      # lot amount
  bid:     Float      # bid amount
  gal:     Address    # receives auction proceeds
  urn:     String     # urn identifier (flip only)
  tab:     Address    # amount to raise - (tend/dent phase switch) (flip only)
  dealt:   Boolean    # true if auction has been settled
  market:  Market     # market detail
  type:    BidType    # auction type - flip | flap | flop
  events:  [BidEvent] # bid state change events
  created: Datetime
  updated: Datetime
}

# Auction types
enum BidType {
  FLIP
  FLAP
  FLOP
}

# Bid actions
enum BidAct {
  KICK
  TEND
  DENT
  DEAL
}

type BidEvent {
  bidId: Integer # bid identifier
  bid:   Bid     # bid object
  act:   BidAct  # bid action
  lot:   Float   # lot or null
  bid:   Float   # bid or null
  guy:   Address # msg.sender
  tic:   Era     # tic or null
  end:   Era     # end or null
  tx:    Tx      # transaction meta
}

# Registry
type Market {
  lad:         Address # Auction contract
  pair:        String  # pair identifier e.g MKRDAI
  base:        Address # base token address
  quote:       Address # quote token address
  baseSymbol:  String  # base symbol e.g MKR
  quoteSymbol: String  # quote symbol e.g DAI
}

type Query {

   allBids(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidOrderBy,
     condition: BidCondition,
     filter:    BidFilter
   ): [Bid]

   getBid(
     id:          Int!
     blockNumber: Int # optionally retrieve bid state at a given block height
   ): Bid

   allBidStates(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidOrderBy,
     condition: BidCondition,
     filter:    BidFilter
     interval:  String # optionally specify a postgres aggregation interval e.g '1 day'
   ): [Bid]

   allBidEvents(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BidEventOrderBy,
     condition: BidEventCondition,
     filter:    BidEventFilter
   ): [BidEvent]

}
