type Ilk {

  # Persisted ilks mapping
  # Ilk state updated via `file` actions across multiple MCD contracts
  # Ink and Art updated via `frob` and  `bite` events

  id:    String  # ilk identifier e.g ETH
  take:  Float   # rate scaling factor
  rate:  Float   # debt scaling factor
  spot:  Float   # price feed with margin
  line:  Float   # debt ceiling
  chop:  Float   # liquidation penalty
  lump:  Float   # flip auction lot size
  flip:  Address # flipper contract
  rho:   Era     # time of last drip
  tax:   Float   # tax
  Ink:   Float   # total encumbered Gem
  Art:   Float   # total debt outstanding
  files: [FileEvent]  # risk param state change events
  bites: [BiteEvent]  # ilk bite events
  frobs: [FrobEvent]  # ilk frob events
  created: Datetime
  updated: Datetime

}

type Urn {

  # Persisted urns mapping
  # Urn state updated via `frob` and `bite` actions.

  ilkId:  String  # unique identifier e.g. ETH
  ilk:    Ilk     # ilk object
  urn:    String  # urn identifier
  ink:    Float   # locked gem
  art:    Float   # outstanding debt
  rat:    Float   # (ink * ilk.spot) / (art * ilk.rate)
  safe:   Boolean # ratio > 1
  frobs:  [FrobEvent]  # state change events
  bites:  [BiteEvent]  # liquidation events
  created: Datetime
  updated: Datetime
}

# Cat.bite.call
# -> create Flip id: e.nflip
# -> create BiteEvent id: e.nflip
type BiteEvent {
  id:      Integer  # storage: flips[nflip]                 desc: flip identifier
  ilkId:   String   # param:   e.ilk                        desc: ilk identifier
  ilk:     Ilk      # obj:     Ilk(id: ilkId)               desc: ilk object
  urnId:   String   # param:   e.urn                        desc: urn identifier
  urn:     Urn      # obj:     Urn(id: urnId, ilkid: IlkId) desc: urn object
  ink:     Float    # storage: ilks[ilk].ink                desc: siezed collateral
  art:     Float    # storage: ilks[ilk].art                desc: siezed debt
  tab:     Float    # param:   e.tab                        desc: debt to recover including liq. penalty
  bids:    [Bid]    # obj:     Bid(flipId: id)              desc: collateral auction(s)
  flip:    Flip     # obj:     Flip(id: id)                 desc: flip state
  tx:      Tx       #                                       desc: transaction meta
}

# Cat.flip.call
# -> create FlipEvent id: e.n
# -> update Flip id: e.n
# -> create Bid id: e.id
type FlipEvent {
  id:      Integer  # param: e.n             desc: flip identifier
  wad:     Float    # param: e.wad           desc: flip amount
  tx:      Tx       #                        desc: transaction meta
}

# Cat.bite.call -> create Flip id:nflip
# Cat.flip.call -> update Flip id:n
type Flip {
  id:      Integer  # param n | nflip           desc: flip identifier
  ink:     Float    # storage: flips[n].ink     desc: remaining collateral to auction
  tab:     Float    # storage: flips[n].tab     desc: remaining debt to recover
  created: Datetime
  updated: Datetime
}

type Sin {

  # Persisted sin queue mapping
  # Sin state updated via `Cat.bite` and `Vow.flog` actions.

  era:     Era      # bite timestamp
  tab:     Float    # sin amount
  bites:   [BiteEvent] # bite events
  flog:    Flog     # flog event
  flogged: Boolean  # true if flogged
  created: Datetime
  updated: Datetime
}

# State change Event
type FileEvent {
  ilkId: String   # ilk identifier
  what:  String   # field to update
  addr:  Address  # present when data is address
  val:   Float    # present when data is a number
  tx:    Tx       # transaction meta
}

# State change Event
type FrobEvent {
  ilkId: String   # ilk identifier
  urn:   String   # urn identifier
  dink:  Float    # ink delta
  dart:  Float    # art delta
  tx:    Tx       # transaction meta
}

# State change Event
type FlogEvent {
  tx:     Tx       # transaction meta
}

type Query {

   # Collection Arguments
   # first: Only read the first `n` values # of the set.
   # last: Only read the last `n` values # of the set.
   # offset: Skip the first `n` values from our `after`
   # cursor, an alternative to cursor based pagination. May
   # not be used with `last`.
   # before: Read all values in the set
   # before (above) this cursor.
   # after: Read all values in the set
   # after (below) this cursor.
   # orderBy: The method to use when ordering `OasisTrade`.
   # condition: A condition to be used in determining which values should be
   # returned by the collection.
   # filter: A filter to be used in determining which values should be returned
   # by the collection.

   allIlks(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   IlkOrderBy,
     condition: IlkCondition,
     filter:    IlkFilter
   ): [Ilk]

   allIlkStates(
     # Collection arguments
     # ...
     interval: String # optionally specify a postgres aggregation interval e.g '1 day'
   ): [Ilk]

   getIlk(
     id: String!
     blockNumber: Int # optionally retrieve ilk state at a given block height
   ): Ilk

   allUrns(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   UrnOrderBy,
     condition: UrnCondition,
     filter:    UrnFilter
   ): [Urn]

   getUrn(
     ilkId: String!
     urnId: String!
     blockNumber: Int # optionally retrieve ilk state at a given block height
   ): Urn

   allUrnStates(
     # Collection arguments
     # ...
     interval: String # optionally specify a postgres aggregation interval e.g '1 day'
   ): [Urn]

   allFiles(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   FileOrderBy,
     condition: FileCondition,
     filter:    FileFilter
   ): [FileEvent]

   allFrobs(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   FrobOrderBy,
     condition: FrobCondition,
     filter:    FrobFilter
   ): [FrobEvent]

   allBites(
     first:     Int,
     last:      Int,
     offset:    Int,
     before:    Cursor,
     after:     Cursor,
     orderBy:   BiteOrderBy,
     condition: BiteCondition,
     filter:    BiteFilter
   ): [BiteEvent]
}
